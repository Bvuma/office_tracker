// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model user {
  id                Int      @id @default(autoincrement())
  username          String   @unique(map: "User_username_key") @db.VarChar(50)
  email             String   @unique(map: "User_email_key") @db.VarChar(50)
  password          String
  emailVerified     Boolean  @default(false)  // Field for email verification
  emailVerifiedAt   DateTime? // Optional DateTime field for storing when email was verified
  emailVerifToken   String?   @db.VarChar(255) // Optional token for email verification
  resetPasswordToken String?
  resetPasswordExpires DateTime?  
  image             String?
  createdAt         DateTime @default(now())
  updateAt          DateTime @updatedAt
  roleId            Int?    // Foreign key for role
  role              role?   @relation(fields: [roleId], references: [id], onDelete: SetNull)
  
  customer         customer[]
  purchases        purchase[]
  expenses         expense[]
  sales            sale[]
  tenders          tenders[]
  suppliers        supplier[] @relation("UserSuppliers") // Updated relation name
  salePurchase     salePurchase[]
}

model role {
  id              Int       @id @default(autoincrement())
  name            String    @unique @db.VarChar(50)
  slug            String    @unique @db.VarChar(50)
  description     String?   @db.Text
  permissions     Json      // Storing permissions as JSON
  number_of_users Int       @default(0)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  deletedAt       DateTime? // Soft delete field

  users          user[]
}


model customer {
  id        Int      @id @default(autoincrement())
  c_name    String
  address   String?
  contact   String
  email     String
  type      String
  createdAt DateTime @default(now())
  sales     sale[]
 userId    Int
  user      user     @relation(fields: [userId], references: [id], onDelete: Cascade)

}

model purchase {
  id        Int      @id @default(autoincrement())
  title     String
  amount    Float
  quantity  Float
  createdAt DateTime @default(now())
  userId    Int
  datePurchased DateTime
  supplierId    Int
  user      user     @relation(fields: [userId], references: [id], onDelete: Cascade)
  materialsUsed salePurchase[]
  supplier      supplier      @relation(fields: [supplierId], references: [id], onDelete: Cascade)

}

model expense {
  id        Int      @id @default(autoincrement())
  ref_no    String   @default(cuid())
  title     String
  amount    Float
  qty       Int
  uom       String
  expenseDate    DateTime
  createdAt DateTime @default(now())
  userId    Int
  user      user     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model sale {
  id        Int      @id @default(autoincrement())
  title     String
  amount    Float
  quantity  Int
  dateSold    DateTime
  createdAt DateTime @default(now())
  userId    Int
  customerId  Int
  customer    customer  @relation(fields: [customerId], references: [id])
  user      user     @relation(fields: [userId], references: [id], onDelete: Cascade)
  materialsUsed salePurchase[]
}

model tenders {
  id          Int      @id @default(autoincrement())
  title       String   @db.VarChar(100)
  createdAt   DateTime @default(now()) @db.Timestamp(6)
  closingDate DateTime
  content     String?
  published   Boolean  @default(false)
  country     String   @db.VarChar(50)
  category    String   @db.VarChar(25)
  authorId    Int
  author    user?   @relation(fields: [authorId], references: [id])

  @@index([authorId], map: "Tenders_authorId_fkey")
}

model salePurchase {
  id            Int      @id @default(autoincrement())
  purchaseId    Int
  saleId        Int
  quantityUsed  Float    // Quantity of material used in this sale
  uom           String
  userId    Int
  user      user     @relation(fields: [userId], references: [id], onDelete: Cascade)
  purchase      purchase @relation(fields: [purchaseId], references: [id], onDelete: Cascade)
  sale          sale     @relation(fields: [saleId], references: [id], onDelete: Cascade)
  createdAt     DateTime @default(now())
}

model supplier {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(100)
  contact      String  @db.VarChar(15)
  address     String   @db.VarChar(255)
  email       String   @unique(map: "Supplier_email_key") @db.VarChar(50)
  createdAt DateTime @default(now())
  createdBy   Int
  creator     user     @relation("UserSuppliers", fields: [createdBy], references: [id], onDelete: Cascade) // Consistent relation name
  updatedAt DateTime @updatedAt

  purchases   purchase[]     // One-to-many relationship with purchases
}



